---
import { Icon } from '../user';

type Props = {
	url: string;
	owner: string;
	title: string;
	description: string;
};

const { url, title, description } = Astro.props;

// Remove 'https://github.com/' headings from the repo string
const repo = url.replace(/^https:\/\/github\.com\//, '');
---

<github-card class="not-prose loading" data-repo={repo}>
	<a
		href={`https://github.com/${repo}`}
		target="_blank"
		class="group flex flex-col gap-y-2 rounded-xl border border-border px-5 py-4 transition-colors hover:bg-muted hover:text-muted-foreground"
	>
		<div class="flex items-center justify-between">
			<div class="flex items-center gap-x-1.5 text-foreground group-hover:text-primary">
				<div id="gh-avatar" class="gh-text me-2 size-8 bg-cover" style="border-radius:999px"></div>
				<span class="text-lg font-bold transition-colors">{title}</span>
			</div>
			<div class="rounded-full bg-primary-foreground p-1">
				<Icon name="github" />
			</div>
		</div>

		<p id="gh-description" class="gh-text">{description}</p>

		<div class="flex items-center justify-between pt-2 text-sm">
			<div class="gh-text flex flex-wrap items-center gap-x-5">
				<div class="flex items-center gap-x-1.5">
					<Icon name="starLine" class="size-4 -translate-y-[2px]" />
					<span id="gh-stars" class="leading-tight">???</span>
				</div>

				<div class="flex items-center gap-x-1.5">
					<Icon name="gitBranch" class="size-4 -translate-y-[2px]" />
					<span id="gh-forks" class="leading-tight">???</span>
				</div>

				<div class="flex items-center gap-x-1.5">
					<Icon name="balanceLine" class="size-4 -translate-y-[2px]" />
					<span id="gh-license" class="leading-tight">???</span>
				</div>

				<span class="flex items-center gap-x-1.5">
					<Icon name="calendar" class="size-4 -translate-y-[2px]" />
					<time id="gh-date" class="leading-tight">???</time>
				</span>
			</div>

			<div class="gh-text flex items-center gap-x-1.5">
				<Icon name="codeLine" class="size-4 -translate-y-[1px]" />
				<span id="gh-language" class="leading-tight">?????</span>
			</div>
		</div>
	</a>
</github-card>

<style>
	@keyframes pulsate {
		0% {
			opacity: 1;
		}
		50% {
			opacity: 0.4;
		}
		to {
			opacity: 1;
		}
	}
	.loading .gh-text {
		color: transparent;
		border-radius: calc(var(--radius) - 3px);
		background-color: hsl(var(--primary-foreground) / var(--tw-text-opacity));
		animation: pulsate 2s infinite linear;
		user-select: none;
	}
	.loading .gh-text:nth-child(2) {
		animation-delay: 1s;
	}
</style>

<script>
	import { getFormattedDate } from 'astro-pure/utils';

	interface GithubProps {
		stargazers_count: number;
		forks: number;
		language: string;
		owner: { avatar_url: string };
		license?: { spdx_id: string };
		description: string;
		created_at: string;
		pushed_at: string;
	}

	class GithubCard extends HTMLElement {
		async fetchGithub(repo: string): Promise<GithubProps | null> {
			try {
				const res = await fetch(`https://api.github.com/repos/${repo}`, {
					referrerPolicy: 'no-referrer',
				});
				if (!res.ok) {
					throw new Error(`HTTP error! status: ${res.status}`);
				}
				return (await res.json()) as GithubProps;
			} catch (e) {
				console.error('Failed to fetch Github data:', e);
				return null;
			}
		}

		numberFormat(value: number): string {
			return Intl.NumberFormat('en-us', {
				notation: 'compact',
				maximumFractionDigits: 1,
			}).format(value);
		}

		async connectedCallback() {
			if (!this.dataset.repo) return;
			try {
				const data = await this.fetchGithub(this.dataset.repo);
				if (!data) return;
				(this.querySelector('#gh-stars') as HTMLElement).textContent = this.numberFormat(data.stargazers_count);
				(this.querySelector('#gh-forks') as HTMLElement).textContent = this.numberFormat(data.forks);
				(this.querySelector('#gh-language') as HTMLElement).textContent = data.language || 'N/A';

				const licenseEl = this.querySelector('#gh-license') as HTMLElement;
				if (data.license?.spdx_id) {
					licenseEl.textContent = data.license.spdx_id;
				} else {
					licenseEl.classList.add('no-license');
				}

				const avatarEl = this.querySelector('#gh-avatar') as HTMLElement;
				if (avatarEl) {
					avatarEl.style.backgroundImage = `url(${data.owner.avatar_url})`;
					avatarEl.style.backgroundColor = 'transparent';
				}

				const repoDate = data.pushed_at || data.created_at;
				if (repoDate) {
					const timeEl = this.querySelector('#gh-date') as HTMLElement;
					timeEl.textContent = getFormattedDate(repoDate);
					timeEl.setAttribute('datetime', new Date(repoDate).toISOString());
				}

				this.classList.remove('loading');
			} catch (e) {
				console.error('Error setting Github data:', e);
			}
		}
	}

	customElements.define('github-card', GithubCard);
</script>
